import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:instagram2/Core/DependcyInjection/DependcyInjection.dart';
import 'package:instagram2/Features/Chat/data/repositories/ChatRepository.dart';

import 'package:meta/meta.dart';

import '../../data/models/RoomModel.dart';

part 'rooms_state.dart';

class RoomsCubit extends Cubit<RoomsState> {
  ChatRepository chatRepository;
  RoomsCubit(this.chatRepository) : super(RoomsInitial());

  Future<String?> createRoom(String anotherUserID) async {
    emit(CreateRoomLoading());
    try {
      final roomID = await chatRepository.CreateNewRoom(anotherUserID);
      emit(CreateRoomSuccess());
      return roomID;
    } catch (e) {
      emit(CreateRoomError(e.toString()));
      return null;
    }
  }

  final currentUserID = getIt<FirebaseAuth>().currentUser!.uid;
  StreamSubscription<List<ChatRoomModel>>? streamSubscription;

  getAllRooms() {
    emit(getRoomLoading());
    try {
      streamSubscription =
          chatRepository.getAllRooms(currentUserID).listen((allchats) async {
        List<ChatRoomModel> updateAllChats = [];
        for (var chat in allchats) {
          var anotherUserID =
              chat.members!.firstWhere((element) => element != currentUserID);
          var anotherDocsofUser =
              await chatRepository.getUserData(anotherUserID);
          chat.anotherUserData = anotherDocsofUser;
          updateAllChats.add(chat);
        }
      });
    } catch (e) {
      emit(getRoomLoadedError(e.toString()));
    }
  }
}
